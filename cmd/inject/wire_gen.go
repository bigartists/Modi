// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"github.com/bigartists/Modi/client"
	"github.com/bigartists/Modi/cmd/server"
	"github.com/bigartists/Modi/src/controllers"
	"github.com/bigartists/Modi/src/informer"
	"github.com/bigartists/Modi/src/middlewares"
	"github.com/bigartists/Modi/src/repo"
	"github.com/bigartists/Modi/src/routes"
	"github.com/bigartists/Modi/src/service"
)

// Injectors from wire.go:

func InitializeApp() (*server.App, error) {
	secretRepo := repo.ProvideSecretRepo()
	configMapRepo := repo.ProviderConfigMapRepo()
	eventRepo := repo.ProviderEventRepo()
	namespaceRepo := repo.ProviderNamespaceRepo()
	rsRep := repo.ProviderRsRep()
	deploymentRepo := repo.ProviderDeploymentRepo()
	podRepo := repo.ProviderPodRepo()
	informerManager := informer.NewInformerManager(secretRepo, configMapRepo, eventRepo, namespaceRepo, rsRep, deploymentRepo, podRepo)
	db := client.ProvideDB()
	iUserRepo := repo.NewIUserGetterImpl(db)
	authMiddleware := middlewares.NewAuthMiddleware(iUserRepo)
	errorHandlerMiddleware := middlewares.NewErrorHandlerMiddleware()
	iUserServiceGetterImpl := service.NewUserServiceImpl(iUserRepo)
	authController := controllers.NewAuthController(iUserServiceGetterImpl)
	iSecret := service.NewSecretService(secretRepo)
	secretController := controllers.NewSecretController(iSecret)
	configmapService := service.ProviderConfigmapService(configMapRepo)
	configMapController := controllers.NewConfigMapController(configmapService)
	podService := service.ProviderPodService(podRepo)
	deploymentService := service.ProviderDeploymentService(rsRep, podRepo, deploymentRepo, namespaceRepo, podService)
	deploymentController := controllers.ProviderDeploymentController(deploymentService)
	userController := controllers.ProviderUserController(iUserServiceGetterImpl)
	engine, err := routes.ProvideRouter(informerManager, authMiddleware, errorHandlerMiddleware, authController, secretController, configMapController, deploymentController, userController)
	if err != nil {
		return nil, err
	}
	app := server.ProvideApp(engine)
	return app, nil
}
